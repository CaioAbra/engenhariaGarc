$spacer: 1rem; // Define o valor padrão do espaçamento base

@mixin spacing($property, $direction, $amount) {
    $value: $amount * $spacer; // Calcula o valor do espaçamento baseado no multiplicador

    @if $property ==margin {
        margin-#{$direction}: $value; // Aplica o espaçamento conforme a direção especificada
    }

    @else if $property ==padding {
        padding-#{$direction}: $value; // Aplica o espaçamento conforme a direção especificada
    }

    @else {
        @warn "Propriedade de espaçamento inválida. Use 'margin' ou 'padding'.";
    }
}

// Cria classes utilitárias para espaçamento
@for $i from 0 through 5 {
    .m-#{$i} {
        @include spacing(margin, all, $i);
    }

    .mt-#{$i} {
        @include spacing(margin, top, $i);
    }

    .mr-#{$i} {
        @include spacing(margin, right, $i);
    }

    .mb-#{$i} {
        @include spacing(margin, bottom, $i);
    }

    .ml-#{$i} {
        @include spacing(margin, left, $i);
    }

    .p-#{$i} {
        @include spacing(padding, all, $i);
    }

    .pt-#{$i} {
        @include spacing(padding, top, $i);
    }

    .pr-#{$i} {
        @include spacing(padding, right, $i);
    }

    .pb-#{$i} {
        @include spacing(padding, bottom, $i);
    }

    .pl-#{$i} {
        @include spacing(padding, left, $i);
    }
}

$line-heights: (
    1: 1,
    1-2: 1.2,
    1-5: 1.5,
    2: 2,
    2-5: 2.5,
    3: 3
); // Defina os multiplicadores de altura de linha desejados

@mixin line-height($amount) {
    $value: map-get($line-heights, $amount);
    line-height: $value;
}

// Crie classes utilitárias para altura da linha
@each $name, $value in $line-heights {
    .lh-#{$name} {
        @include line-height($name);
    }
}